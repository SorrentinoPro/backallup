#!/bin/bash
#============================================
# Initialize variables
#============================================
# Define color codes
GREEN=$(tput setaf 2)
GOLD=$(tput setaf 3)
RED=$(tput setaf 1)
NC=$(tput sgr0) # No Color

# Check for dependencies
DEPENDENCIES=("tar" "jq" "ip" "hostname" "uname" "date")

# Set the hostname, IP address, OS name, and datetime
HOSTNAME=$(hostname)
IPADDRESS=$(dig +short $(hostname) | head -1)
if [ -z "$IPADDRESS" ]; then
    IPADDRESS=$(ip addr show | grep "inet " | head -1 | awk '{print $2}' | cut -d/ -f1)
fi
OSNAME=$(lsb_release -ds | xargs | tr ' ' '_')
DATETIME=$(date +%d-%m-%Y_%H-%M-%S)
JOB=false
YAP=false
ORIGINAL_PATH=false
PROFILE_NAME=""
DOMAIN=""
RESTORE_FILE=""
SERVER_BACKUP=false
SKIP_BACKUPS=false
CONFIG_DIR="/.back2back"
MYSQL_DIR="$CONFIG_DIR/mysql"
JSON_B2B="$CONFIG_DIR/back2back.json"

# Set the backup directory
BACKUP_DIR=/.backallup/backups

# Define the help message
HELP_MESSAGE="
Usage: backallup [options]

Options:
    -h, --help      Display this help message
    -p, --profile   Specify the profile name
    -d, --domain    Specify the domain name < after profile
    -r, --restore   Restore a backup file
    -s, --server    Backup the entire server
        --skipbks   Skip backing up the /backallup/backups folder
    -o              Restore to original path (only for restore command)
    -y              Yes to all prompts, at the end of any command
    -j, --job       Run a contrab job for the command  
Examples:
    backallup myfile.txt
    backallup -p myprofile -d example.com
    backallup -s
    backallup -s --skip-backups
    backallup -r myfile.tar.gz
    backallup -r myfile.tar.gz -o

    backallup <any command> -y
    backallup <any command> -j
"

#============================================
# Functions
#============================================

# MySql Checker
check_mysql_credentials() {
    while getopts ":h:u:p:" opt; do
        case $opt in
        h) host="$OPTARG";;
        u) user="$OPTARG";;
        p) password="$OPTARG";;
        \?) echo "Invalid option: -$OPTARG"; exit 1;;
        esac
    done
    # Prompt the user to enter the MySQL credentials
    if [ -z "$host" ]; then
        read -p "Enter the MySQL host: " host
    else
        echo "host defined as $host" 
    fi
    if [ -z "$user" ]; then
        read -p "Enter the MySQL user: " user
    else
        echo "user defined as $user" 
    fi
    if [ -z "$password" ]; then
        read -s -p "Enter the MySQL password: " password
    else
        echo "password defined ******" 
    fi
    # Check if the credentials are correct
    echo "Verefying credentials, wait please ..."
    if mysql -h $host -u $user -p$password -e "SHOW DATABASES" &> /dev/null; then
        echo "${GREEN}MySQL credentials Matching!${NC}"
        return 0
    else
        echo "${RED}Invalid MySQL credentials.${NC}"
        host=""
        user=""
        password=""

        return 1
    fi
}

# MySql dump
function mysqldumper {
    mkdir -m 755 -p $MYSQL_DIR
    sql_file_path="$MYSQL_DIR/$sql_file"

    # touch $sql_file_path
    
    # Prompt the user to enter the MySQL credentials
    while true; do
        if [ "$DB_BACKUP" == "false" ]; then 
            break
        fi
        
        if $SERVER_BACKUP; then 
            read -p "${GOLD}Enter the MySQL host: ${NC}" mysql_host
            read -p "${GOLD}Enter the MySQL user: ${NC}" mysql_user
            read -s -p "${GOLD}Enter the MySQL password: ${NC}" mysql_password
            echo "" 
        fi
        # Debug the variables in commands
        # echo "==\ Setting up the following >> /============"
        # echo "host: $mysql_host"
        # echo "user: $mysql_user"
        # echo "password: $mysql_password"
        # echo "database_name: $mysql_database_name"
        # echo "sql_file: $sql_file"
        # echo "sql_file_path: $sql_file_path"
        # echo "============================================"
        # exit
        while true; do
            check_mysql_credentials -h $mysql_host -u $mysql_user -p $mysql_password
            if [ $? -eq 0 ]; then
                # echo "sql True"
                mysql_credentials="true"
                break
            else
                mysql_credentials="false"
                if [ "$YAP" != "true" ]; then
                    read -p "${GOLD}Do you want to try (MANUALLY)? (y/n):${NC}" response
                    case $response in
                        y|yes|Y|YES|Yes) continue;;
                        n|no|N|NO|No) break;;
                        *) echo "${RED}Invalid response.${NC}";;
                    esac
                elif [ "$YAP" = "true" ]; then
                    echo "${GOLD}Skipping database backup...${NC}"; DB_BACKUP="false"; break
                else
                    continue
                fi
            fi
        done
      
        if [ "$mysql_credentials" = "true" ]; then
            
            if $SERVER_BACKUP; then 
                # Store the command in a variable and execute it
                dump_cmd="mysqldump -h \"$mysql_host\" -u \"$mysql_user\" -p\"$mysql_password\" --databases \$(mysql -h \"$mysql_host\" -u \"$mysql_user\" -p\"$mysql_password\" -e \"SHOW DATABASES;\" | grep -v \"information_schema\" | grep -v \"mysql\" | grep -v \"performance_schema\" | grep -v \"sys\" | grep -v \"Database\") > \"$sql_file_path\""
                DOMAIN=$HOSTNAME
            else
                dump_cmd="mysqldump -h \"$mysql_host\" -u \"$mysql_user\" -p\"$mysql_password\" \"$mysql_database_name\" > \"$sql_file_path\""
            fi
            
            # Execute the command
            eval $dump_cmd

            # Check if the backup was successful
            if [ $? -eq 0 ]; then
                echo "${GREEN}MySQL dump created: $sql_file_path${NC}"
                
                # Create the back2back.json file
                touch $JSON_B2B
                echo "{
                    \"domains2goback\": {
                        \"$DOMAIN\": {
                            \"mysql2goback\": {
                                \"host\": \"$mysql_host\",
                                \"user\": \"$mysql_user\",
                                \"password\": \"$mysql_password\",
                                \"database_name\": \"$mysql_database_name\",
                                \"sql_file\": \"$sql_file\"
                            }
                        }
                    }
                }" > $JSON_B2B
                echo "${GREEN}back2back.json generated.${NC}"
                folders="/home/$DOMAIN $CONFIG_DIR"
                break
            else
                if [ "$YAP" != "true" ]; then
                    while true; do
                        read -p "${GOLD}Do you want to retry or skip? (r/s): ${NC}" response
                        case $response in
                            r|retry|R|RETRY|Retry)  echo "Retrying ..."; break;;
                            s|skip|S|SKIP|Skip) echo "${GOLD}Skipping database backup...${NC}"; DB_BACKUP="false"; break;;
                            *) echo "${RED}Invalid response.${NC}";;
                        esac
                    done
                else
                    echo "${GOLD}Skipping database backup...${NC}"; DB_BACKUP="false"; break
                fi
            fi   
        fi   
    done
}

# crontab translator
translate_cron() {
    local cron_expression="$1"
    IFS=' ' read -r minute hour day month weekday <<< "$cron_expression"

    local time_desc day_desc month_desc weekday_desc

    describe_hour() {
        case "$1" in
            "*") echo "every hour" ;;
            */[0-9]*) echo "every ${1#*/} hours" ;;
            0) echo "midnight" ;;
            12) echo "noon" ;;
            *) echo "$(printf "%d %s" $((10#$1%12)) $(if [ $((10#$1>=12)) -eq 1 ]; then echo PM; else echo AM; fi))" ;;
        esac
    }

    describe_minute() {
        case "$1" in
            0) echo "on the hour" ;;
            */[0-9]*) echo "every ${1#*/} minutes" ;;
            [0-9]|[0-5][0-9]) echo "$((10#$1)) minutes" ;;
            *) echo "at specific minutes ($1)" ;;
        esac
    }

    describe_weekday() {
        local -a days=([0]=Sunday Monday Tuesday Wednesday Thursday Friday Saturday)
        echo "${days[$1]}"
    }

    # Time (combining minute and hour)
    if [[ $minute == "*" && $hour == "*" ]]; then
        time_desc="every minute"
    elif [[ $minute == "*" ]]; then
        time_desc="every minute of $(describe_hour "$hour")"
    elif [[ $hour == "*" ]]; then
        time_desc="at $(describe_minute "$minute") past every hour"
    else
        time_desc="at $(printf "%02d:%02d" "$hour" "$minute")"
    fi

    # Day of month
    case "$day" in
        "*") day_desc="" ;;
        */[0-9]*) day_desc="every ${day#*/} days" ;;
        [0-9]*) 
            local suffix
            case $day in
                1|21|31) suffix="st" ;;
                2|22) suffix="nd" ;;
                3|23) suffix="rd" ;;
                *) suffix="th" ;;
            esac
            day_desc="on the ${day}${suffix}" ;;
        *) day_desc="on specific days ($day)" ;;
    esac

    # Month
    local -a months=([1]=January February March April May June July August September October November December)
    case "$month" in
        "*") month_desc="" ;;
        */[0-9]*) month_desc="every ${month#*/} months" ;;
        [0-9]*) month_desc="${months[$month]}" ;;
        *) month_desc="in specific months ($month)" ;;
    esac

    # Day of week
    if [[ $weekday != "*" ]]; then
        local -a days=([0]=Sunday Monday Tuesday Wednesday Thursday Friday Saturday)
        case "$weekday" in
            [0-7]) weekday_desc="on $(describe_weekday "$weekday")" ;;
            *) weekday_desc="on specific weekdays ($weekday)" ;;
        esac
    else
        weekday_desc=""
    fi

    # Construct the final description
    local description="This cron job is scheduled to run $time_desc"
    [[ -n $day_desc ]] && description+=", $day_desc"
    if [[ -n $month_desc ]]; then
        [[ -n $day_desc ]] && description+=" of "
        description+="$month_desc"
    elif [[ -z $day_desc && -z $weekday_desc ]]; then
        description+=", every day"
    fi
    [[ -n $weekday_desc ]] && description+=", $weekday_desc"
    echo "$description."
}

#============================================
# Logic
#============================================

# Check dependencies
for DEPENDENCY in "${DEPENDENCIES[@]}"; do
    if ! command -v "$DEPENDENCY" &>/dev/null; then
        echo "${RED}Error: $DEPENDENCY is not installed. Please install it and try again.${NC}"
        exit 1
    fi
done

# Get the command line arguments
options=$(getopt -o hp:d:r:s:oyj --long help,profile:,domain:,restore:,server,skipbks,yes,job -- "$@")
eval set -- "$options"

while true; do
    case "$1" in
        -h|--help)
            echo "$HELP_MESSAGE"
            exit 0
            ;;
        -p|--profile)
            PROFILE_NAME="$2"
            shift 2
            ;;
        -d|--domain)
            DOMAIN="$2"
            shift 2
            ;;
        -r|--restore)
            RESTORE_FILE="$2"
            shift 2
            ;;
        -s|--server)
            SERVER_BACKUP=true
            shift
            ;;
        --skipbks)
            SKIP_BACKUPS=true
            shift
            ;;
        -o)
            if [ -n "$RESTORE_FILE" ]; then
                ORIGINAL_PATH=true
            else
                echo "${RED}Error: -o option is only valid for restore command${NC}"
                exit 1
            fi
            shift
            ;;
        -y|--yes)
            YAP=true
            shift
            ;;
        -j|--job)
            JOB=true
            shift
            ;;
        --)
            shift
            break
            ;;
    esac
done

# Run contrab job
if $JOB; then
    # Get the full command
    COMMAND_INPUT=$0$options
    COMMAND_INPUT=$(sed "s/'//g; s/-j//g; s/--//g" <<< "$COMMAND_INPUT")
    echo "$COMMAND_INPUT"

    # Prompt the user to select the scheduling option
    echo "Select the scheduling option:"
    echo "1. Every day at midnight"
    echo "2. Every week at midnight"
    echo "3. Every month at midnight"
    echo "4. Every year on January 1st at midnight"
    echo "5. Custom"

    read -r option

    case $option in
        1)
            # Set the cron job timing for every day at midnight
            cron_timing="0 0 * * *"
            ;;
        2)
            # Set the cron job timing for every week at midnight
            cron_timing="0 0 * * 0"
            ;;
        3)
            # Set the cron job timing for every month at midnight
            cron_timing="0 0 1 * *"
            ;;
        4)
            # Set the cron job timing for every year on January 1st at midnight
            cron_timing="0 0 1 1 *"
            ;;
        5)
            # Prompt the user for the minute value
            while true; do
                echo "Enter the minute value (*, */number, or a number between 0 and 59):(default = *)"
                read -r minute
                case $minute in
                    "*"|"") echo "Setting default (*)";minute="*";break;;
                    [0-9]|[0-5][0-9]) break;;
                    */[0-9]|*/[0-5][0-9]) break;;
                    *) echo "${RED}Invalid minute value. Please retry:${NC}";;
                esac
            done
            # Prompt the user for the hour value
            while true; do
                echo "Enter the hour value (*, */number, or a number between 0 and 23):(default = *)"
                read -r hour
                case $hour in
                    "*"|"") echo "Setting default (*)";hour="*";break;;
                    [0-9]|[0-2][0-3]) break;;
                    */[0-9]|*/[0-2][0-3]) break;;
                    *) echo "${RED}Invalid hour value. Please retry:${NC}";;
                esac
            done
            # Prompt the user for the day of the month value
            while true; do
                echo "Enter the Day of month value (*, */number, or a number between 1 and 31):(default = *)"
                read -r day_of_month
                case $day_of_month in
                    "*"|"") echo "Setting default (*)";day_of_month="*";break;;
                    [1-9]|[0-3][0-1]) break;;
                    */[1-9]|*/[0-3][0-1]) break;;
                    *) echo "${RED}Invalid day_of_month value. Please retry:${NC}";;
                esac
            done
            # Prompt the user for the month value
            while true; do
                echo "Enter the month value (*, */number, or a number between 1 and 12):(default = *)"
                read -r month
                case $month in
                    "*"|"") echo "Setting default (*)";month="*";break;;
                    [1-9]|[0-1][0-2]) break;;
                    */[1-9]|*/[0-1][0-2]) break;;
                    *) echo "${RED}Invalid month value. Please retry:${NC}";;
                esac
            done
            # Prompt the user for the day of the week value
            while true; do
                echo "Enter the day of the week value (*, */number, or a number between 0 and 6):(default = *)"
                echo "  0 = Sunday"
                echo "  1 = Monday"
                echo "  2 = Tuesday"
                echo "  3 = Wednesday"
                echo "  4 = Thursday"
                echo "  5 = Friday"
                echo "  6 = Saturday"
                read -r day_of_week
                case $day_of_week in
                    "*"|"") echo "Setting default (*)";day_of_week="*";break;;
                    [0-6]) break;;
                    */[0-6]) break;;
                    *) echo "${RED}Invalid Day of the week value. Please retry:${NC}";;
                esac
            done

            # Construct the cron job timing
            cron_timing="$minute $hour $day_of_month $month $day_of_week"
            ;;
        *)
            echo "Invalid option. Please try again."
            exit 1
            ;;
    esac
    # Print the cron job timing
    cron_comment=$(translate_cron "$cron_timing")
    echo $cron_comment 
    
    # Check if the cron job already exists
    if crontab -l | grep -Fq "$cron_timing $COMMAND_INPUT"; then
        echo "${GOLD}Cron job already exists.${NC}"
    else
    # Add the cron job to the system's crontab file
        crontab -l | { cat; echo "#$cron_comment" && echo "$cron_timing $COMMAND_INPUT"; } | crontab -
        echo "${GREEN}Cron job added successfully.${NC}"
    fi
    
    if [ "$YAP" != "true" ]; then
        while true; do
            read -p "${GOLD}would you like to run ($COMMAND_INPUT) now? (y/n): ${NC}" response
            case $response in
                y|yes|Y|YES|Yes) break;;
                n|no|N|NO|No) echo "${GOLD}Exiting...${NC}"; exit;;
                *) echo "${RED}Invalid response.${NC}";;
            esac
        done
    else
        exit
    fi
fi

# Implement the backallup commands
if [ -n "$1" ]; then
    # Create the backup file
    BACKUP_FILE="${BACKUP_DIR}/backup_${DATETIME}.tar.gz"

    # Create the backup file
    if ! tar -cvpzf "$BACKUP_FILE" "$@"; then
        echo "${RED}Error: Failed to create backup file.${NC}"
        exit 1
    fi

    # Output the backup file name to the terminal
    echo "${GREEN}Backup created: $BACKUP_FILE${NC}"
elif $SERVER_BACKUP; then
    # Create the backup file
    FILENAME="${HOSTNAME}_${IPADDRESS}_${OSNAME}_${DATETIME}.tar.gz"
    BACKUP_PATH="${BACKUP_DIR}/${FILENAME}"

    # Prompt the user to confirm
    if [ "$YAP" != "true" ]; then
        while true; do
            read -p "${GOLD}Are you sure you want to create a full server backup? (y/n): ${NC}" response
            case $response in
                y|yes|Y|YES|Yes) break;;
                n|no|N|NO|No) echo "${GOLD}Exiting...${NC}"; exit 1;;
                *) echo "${RED}Invalid response.${NC}";;
            esac
        done
    fi

    # Prompt the user to backup databases
    if [ "$YAP" != "true" ]; then
        while true; do
            read -p "${GOLD}Do you want to backup databases? (y/n): ${NC}" response
            case $response in
                y|yes|Y|YES|Yes) DB_BACKUP="true"; break;;
                n|no|N|NO|No) echo "${GOLD}Skipping database backup...${NC}"; DB_BACKUP="false"; break;;
                *) echo "${RED}Invalid response.${NC}";;
            esac
        done
    else
        DB_BACKUP="true"
    fi

    if [ "$DB_BACKUP" == "true" ]; then
        # Prompt the user to select the database type
        if [ "$YAP" != "true" ]; then
            while true; do
                read -p "${GOLD}Select the database type:
                (1) MySQL
                (2) PostgreSQL
                (3) MongoDB
                (0) > Exit
                (4) Other
                ${NC}" response
                case $response in
                    1) DB_TYPE="mysql"; break;;
                    2) DB_TYPE="postgresql"; echo "${GOLD}PostgreSQL database backup is not supported yet...${NC}";;
                    3) DB_TYPE="mangodb"; echo "${GOLD}MongoDB database backup is not supported yet...${NC}";;
                    4) DB_TYPE="other"; echo "${GOLD}Other database type is not supported yet...${NC}";;
                    0) echo "Exithing"; exit 1;;
                    *) echo "${RED}Invalid response.${NC}";;
                esac
            done
        else
            DB_TYPE="mysql"
        fi

        if [ "$DB_TYPE" == "mysql" ]; then
            sql_file="all_databases_backup.sql"
            mysql_database_name="all" 
            # Create the MySQL dump
            mysqldumper
        fi
    fi
    # Create the backup
    if $SKIP_BACKUPS; then
        echo "Skipping ${BACKUP_DIR} from backup..."
        sudo tar -cvpzf "${BACKUP_PATH}" --exclude="${BACKUP_DIR}" --exclude="${BACKUP_PATH}" --one-file-system /
        echo "${GREEN}Full Backup, without ${BACKUP_DIR} created in: ${BACKUP_PATH}${NC}"
    else
        sudo tar -cvpzf "${BACKUP_PATH}" --exclude="${BACKUP_PATH}" --one-file-system /
        echo "${GREEN}Full Backup created in: ${BACKUP_PATH}${NC}"
    fi
    rm -rf $CONFIG_DIR

elif [ -n "$PROFILE_NAME" ]; then
    # Check if the profile is "cyberpanel"
    if [ "$PROFILE_NAME" == "cyberpanel" ]; then
        # Check if the WordPress wp-config.php file exists
        wp_config_path="/home/$DOMAIN/public_html/wp-config.php"
        # echo "wp_config: $wp_config_path"
        if [ -f "$wp_config_path" ]; then
            echo "${GREEN}Found wordpress configuration.${NC}"
            # Collect the MySQL details from the file (allow for variations in spacing and quotes)
            mysql_host=$(grep -E "define\s*\(\s*['\"]DB_HOST['\"]" "$wp_config_path" | cut -d "'" -f 4)
            mysql_user=$(grep -E "define\s*\(\s*['\"]DB_USER['\"]" "$wp_config_path" | cut -d "'" -f 4)
            mysql_password=$(grep -E "define\s*\(\s*['\"]DB_PASSWORD['\"]" "$wp_config_path" | cut -d "'" -f 4)
            mysql_database_name=$(grep -E "define\s*\(\s*['\"]DB_NAME['\"]" "$wp_config_path" | cut -d "'" -f 4)
            sql_file="$mysql_database_name.sql"
            
            # Create the MySQL dump
            mysqldumper
            folders="/home/$DOMAIN $CONFIG_DIR"
        else
            echo "${RED}Error: wp-config.php file not found${NC}"
            folders="/home/$DOMAIN"
        fi
        folders="/home/$DOMAIN $CONFIG_DIR"
        echo "Setting up folders: $folders"
        #------------------------
        # Create the backup file
        if ! eval tar -czf "${BACKUP_DIR}/${PROFILE_NAME}_${DOMAIN}_${DATETIME}.tar.gz" $folders; then
            echo "${RED}Error: Failed to create backup file.${NC}"
        else
            # Output the backup file name to the terminal
            echo "${GREEN}Backup file created: ${BACKUP_DIR}/${PROFILE_NAME}_${DOMAIN}_${DATETIME}.tar.gz${NC}"
        fi
        rm -rf $CONFIG_DIR
    else
        echo "${RED}Error: Failed to create backup file. $PROFILE_NAME Not supported.${NC}"
        exit 1
    fi
    
elif [ -n "$RESTORE_FILE" ]; then
    # Restore the backup
    if [ ! -f "$RESTORE_FILE" ]; then
        echo "${RED}Error: Restore file not found.${NC}"
        exit 1
    else
        # Create a temporary directory to extract the files to
        TMP_DIR=$(mktemp -d)
        JSON_B2B="$TMP_DIR$JSON_B2B"
        CONFIG_DIR="$TMP_DIR$CONFIG_DIR"
        if ! tar -xvpzf "$RESTORE_FILE" -C "$TMP_DIR" > /dev/null; then
            echo "${RED}Error: Failed to restore backup file.${NC}"
            exit 1
        else
            # Ensure Original path right to action
            if [ "$YAP" != "true" ]; then
                if [ "$ORIGINAL_PATH" = "true" ]; then
                    while true; do
                        echo "${RED}WARNING!${NC} - you selected restore to original path (-o) this option will potentially overwrite existing files with the same name in the target directory."
                        read -p "${GOLD}Do you want to continue? (y/n): ${NC}" response
                        case $response in
                            y) break;;
                            n) echo "${GOLD}Exiting...${NC}"; exit 1;;
                            *) echo "${RED}Invalid response.${NC}";;
                        esac
                    done
                fi
            fi
            for dir in $(find "$TMP_DIR" -type f); do
                if [ "$dir" == "$JSON_B2B" ]; then
                    new_path=${dir/${TMP_DIR}/}
                    # Follow the structure in the back2back.json file to perform extra tasks
                    echo "${GREEN}Found $new_path Following structure >> ${NC}"
                    # Use jq to parse the JSON file and extract the values
                    domains=$(jq -r '.domains2goback | keys[]' "$JSON_B2B")
                    echo "Initializing restoration databases ..."
                    for domain in $domains; do
                        host=$(jq -r ".domains2goback.\"$domain\".mysql2goback.host" "$JSON_B2B")
                        user=$(jq -r ".domains2goback.\"$domain\".mysql2goback.user" "$JSON_B2B")
                        password=$(jq -r ".domains2goback.\"$domain\".mysql2goback.password" "$JSON_B2B")
                        db_name=$(jq -r ".domains2goback.\"$domain\".mysql2goback.database_name" "$JSON_B2B")
                        sql_file_name=$(jq -r ".domains2goback.\"$domain\".mysql2goback.sql_file" "$JSON_B2B")
                        
                        sql_file="$TMP_DIR$MYSQL_DIR/$sql_file_name"
                        echo "Domain: $domain"
                        
                        if [ "$YAP" != "true" ]; then
                            while true; do
                                read -p "${GOLD}Do you want to restore $sql_file_name? (y/n): ${NC}" response
                                case $response in
                                    y|yes|Y|YES|Yes) echo "Trying Restoring..."; domainbk="true"; break;;
                                    n|no|N|NO|No) echo "${GOLD}Skipping ...${NC}"; domainbk="false"; break;;
                                    *) echo "${RED}Invalid response$.${NC}";;
                                esac
                            done
                        else
                            domainbk="true"
                        fi

                        if [ "$domainbk" = "true" ]; then
                            echo "Checking associated $sql_file_name ..."
                            if [ -f  "$sql_file" ]; then
                                echo "${GREEN}$sql_file_name Found!${NC}"
                                echo "Checking $domain credential matches..."
                                
                                while true; do
                                    check_mysql_credentials -h $host -u $user -p $password
                                    if [ $? -eq 0 ]; then
                                        # echo "sql True"
                                        mysql_credentials="true"
                                        break
                                    else
                                        mysql_credentials="false"
                                        if [ "$YAP" != "true" ]; then
                                            read -p "${GOLD}Do you want to try (MANUALLY)? (y/n):${NC}" response
                                            case $response in
                                                y|yes|Y|YES|Yes) continue;;
                                                n|no|N|NO|No) break;;
                                                *) echo "${RED}Invalid response.${NC}";;
                                            esac
                                        elif [ "$YAP" = "true" ]; then
                                            echo "${RED}Failed MySQL credentials for $domain! -- Try Uploading $sql_file_name manually.${NC}"
                                            break
                                        else
                                            continue
                                        fi
                                    fi
                                done
                                #------ 
                                if [ "$mysql_credentials" = "true" ]; then
                                    if [ "$db_name" = "all" ]; then
                                        # Restore the backup file
                                        mysql -h "$host" -u "$user" -p"$password" < "$sql_file"

                                        # Check if the restoration was successful
                                        if [ $? -eq 0 ]; then
                                            echo "Database restoration from '$sql_file' completed successfully."
                                        else
                                            echo "Database restoration from '$sql_file' failed."
                                        fi
                                    else
                                        # Check if the database exists
                                        if result=$(mysql -u "$user" --password="$password" -h "$host" -e "SHOW DATABASES LIKE '$db_name'") && [ -n "$result" ]; then
                                            # Database exists, proceed with the import/override/merge
                                            echo "${GOLD}Database $db_name exists.${NC}"

                                            # Check if the database is not empty
                                            count=$(mysql -u "$user" --password="$password" -h "$host" -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = '$db_name'" | tail -n 1)
                                            if [ -n "$count" ]; then
                                                if [ "$count" -gt 0 ]; then
                                                    # Prompt the user to override/merge/cancel
                                                    read -p "${GOLD}Database $db_name is not empty. Do you want to:
                                                    (o) override it
                                                    (m) merge with the new data
                                                    (c) cancel the operation
                                                    ${NC}" response

                                                    case $response in
                                                        o|override|O|OVERRIDE)
                                                            # Override the database
                                                            echo "Overriding the database ..."
                                                            # Drop the existing tables
                                                            echo "Dropping existing tables..."
                                                            if mysql -u "$user" --password="$password" -h "$host" "$db_name" -e "SET FOREIGN_KEY_CHECKS = 0; DROP TABLE IF EXISTS \`information_schema\`; SET FOREIGN_KEY_CHECKS = 1;" > /dev/null 2>&1; then
                                                                echo "${GREEN}Existing tables dropped successfully.${NC}"
                                                                echo "Executing the SQL file to override ($db_name) ..."
                                                                # Execute the SQL file to override the database
                                                                if mysql -u "$user" --password="$password" -h "$host" "$db_name" < "$sql_file" > /dev/null 2>&1; then
                                                                    echo "${GREEN}Database overridden successfully.${NC}"
                                                                else
                                                                    echo "Error overriding database: ${RED}Failed${NC}"
                                                                    exit 1
                                                                fi
                                                            else
                                                                echo "Error dropping existing tables: ${RED}Failed${NC}"
                                                                exit 1
                                                            fi
                                                            ;;
                                                        m|merge|M|MERGE)
                                                            # Merge with the new data
                                                            echo "Merging with the new data ..."
                                                            # Execute the SQL file to merge with the existing data
                                                            if mysql -u "$user" --password="$password" -h "$host" "$db_name" < "$sql_file" > /dev/null 2>&1; then
                                                                echo "${GREEN}Database merged successfully.${NC}"
                                                            else
                                                                echo "Error merging database: ${RED}Failed${NC}"
                                                                exit 1
                                                            fi
                                                            ;;
                                                        c|cancel|C|CANCEL)
                                                            # Cancel the operation
                                                            echo "${GOLD}Operation cancelled.${NC}"
                                                            exit 1
                                                            ;;
                                                        *)
                                                            # Invalid input
                                                            echo "${RED}Invalid input. Please try again.${NC}"
                                                            ;;
                                                    esac

                                                else
                                                    # Database is empty, proceed with the import
                                                    echo "${GREEN}Database is empty${NC}, importing $sql_file_name data ..."
                                                    if mysql -u "$user" --password="$password" -h "$host" "$db_name" < "$sql_file" > /dev/null 2>&1; then
                                                        echo "${GREEN}Database imported successfully.${NC}"
                                                    else
                                                        echo "Error importing database: ${RED}Failed${NC}"
                                                        exit 1
                                                    fi
                                                fi
                                            else
                                                echo "Error: unable to retrieve count. ${RED}Failed${NC}"
                                                exit 1
                                            fi
                                        else
                                            # Database does not exist, create a new one
                                            echo "${GREEN}Database $db_name does not exist${NC}, creating a new one..."
                                            if mysql -u "$user" --password="$password" -h "$host" -e "CREATE DATABASE $db_name" > /dev/null 2>&1; then
                                                echo "${GREEN}Database created successfully.${NC}"
                                                # Import the new data
                                                echo "Importing new data..."
                                                if mysql -u "$user" --password="$password" -h "$host" "$db_name" < "$sql_file" > /dev/null 2>&1; then
                                                    echo "${GREEN}Database imported successfully.${NC}"
                                                else
                                                    echo "Error importing database: ${RED}Failed${NC}"
                                                    exit 1
                                                fi
                                            else
                                                echo "Error creating database: ${RED}Failed${NC}"
                                                exit 1
                                            fi
                                        fi
                                    fi
                                fi

                                #------                                  
                            else
                                echo "Error sql file not found: ${GOLD}Skipping${NC}"
                            fi
                            
                        else
                            echo "${GOLD}$domain database restoration skipped.${NC}"
                        fi
                    done
                fi
            done
            for dir in $(find "$TMP_DIR" -maxdepth 1 -type d); do
                if [ "$dir" != "$TMP_DIR" -a "$dir" != "$MYSQL_DIR" -a "$dir" != "$CONFIG_DIR" ]; then
                    # Construct the original path
                    new_path=${dir/${TMP_DIR}/}
                
                    echo "Handling: $new_path"
                    # Ensure Original path right to action
                    if [ "$ORIGINAL_PATH" != "true" ]; then
                        # Construct the new path
                        new_path=$new_path"__BAU"
                            # Transfer folders and files
                        echo "Moving content to: $new_path"
                    else
                        # Move the directory to its respective location
                        echo "Merging content to $new_path ..."
                    fi
                    if [ -d $dir ]; then
                        rsync -a "$dir/" "$new_path/"
                    elif [ -f $dir ]; then
                        rsync -a "$dir" "$new_path"
                    fi
                    echo "${GREEN}=> Done.${NC}"
                
                    echo "---------------------------------------------------"
                    echo " "
                fi
            done
            # Remove the temporary directory
            rm -rf "$TMP_DIR"
        fi
        echo "${GREEN}Backup file restored successfully.${NC}"
    fi
fi
