#!/bin/bash

# Set the backup directory
BACKUP_DIR=/backallup/backups

# Check for dependencies
DEPENDENCIES=("tar" "jq" "ip" "hostname" "uname" "date")
for DEPENDENCY in "${DEPENDENCIES[@]}"; do
	if ! command -v "$DEPENDENCY" &>/dev/null; then
		echo "Error: $DEPENDENCY is not installed. Please install it and try again."
		exit 1
	fi
done

# Define the help message
HELP_MESSAGE="
Usage: backallup [options]

Options:
	-h, --help      Display this help message
	-p, --profile   Specify the profile name
	-d, --domain    Specify the domain name
	-j, --json      Specify the custom JSON file
	-r, --tar       Specify the custom TAR file
	-s, --server    Backup the entire server
	-skipbks, --skip-backups  Skip backing up the /backallup/backups folder

Examples:
	backallup -p myprofile -d mydomain
	backallup -p myprofile -j custom.json
	backallup -s
	backallup -s -skipbks
	backallup myfile.txt
"

# Get the command line arguments
while getopts ":hp:d:j:r:s:skipbks" opt; do
	case $opt in
	h)
		echo "$HELP_MESSAGE"
		exit 0
		;;
	p) PROFILE_NAME="$OPTARG" ;;
	d) DOMAIN="$OPTARG" ;;
	j) CUSTOM_JSON_FILE="$OPTARG" ;;
	r) CUSTOM_TAR_GZ_FILE="$OPTARG" ;;
	s) SERVER_BACKUP="true" ;;
	skipbks) SKIP_BACKUPS="true" ;;
	\?)
		echo "Invalid option: -$OPTARG"
		exit 1
		;;
	esac
done

# Implement the backallup commands
if [ "$SERVER_BACKUP" = "true" ]; then
	# Set the hostname, IP address, OS name, and datetime
	HOSTNAME=$(hostname)
	IPADDRESS=$(ip addr show | awk '/inet / {print $2}' | cut -d/ -f1)
	OSNAME=$(uname -s)
	DATETIME=$(date +%Y-%m-%d-%H-%M-%S)

	# Create the backup file
	if [ "$SKIP_BACKUPS" = "true" ]; then
        echo "Skipping /backallup/backups from backup..."
		sudo tar -czf "${BACKUP_DIR}/${HOSTNAME}_${IPADDRESS}_${OSNAME}_${DATETIME}.tar.gz" \
			--exclude=/sys \
			--exclude=/proc \
			--exclude=/dev \
			--exclude=/run \
			--exclude=/mnt \
			--exclude=/media \
			--exclude=/tmp \
			--exclude=/backallup/backups \
			/
	else
		sudo tar -czf "${BACKUP_DIR}/${HOSTNAME}_${IPADDRESS}_${OSNAME}_${DATETIME}.tar.gz" \
			--exclude=/sys \
			--exclude=/proc \
			--exclude=/dev \
			--exclude=/run \
			--exclude=/mnt \
			--exclude=/media \
			--exclude=/tmp \
			/
	fi

	# Output the backup file name to the terminal
	echo "Backup file created: ${BACKUP_DIR}/${HOSTNAME}_${IPADDRESS}_${OSNAME}_${DATETIME}.tar.gz"
elif [ "$1" != "" ]; then
	# Get the file or directory name
	FILE_OR_DIRECTORY=$1

	# Set the datetime
	DATETIME=$(date +%Y-%m-%d-%H-%M-%S)

	# Create the backup file
	if ! tar -czf "${BACKUP_DIR}/${FILE_OR_DIRECTORY}_${DATETIME}.tar.gz" "${FILE_OR_DIRECTORY}"; then
		echo "Error: Failed to create backup file."
		exit 1
	fi

	# Output the backup file name to the terminal
	echo "Backup file created: ${BACKUP_DIR}/${FILE_OR_DIRECTORY}_${DATETIME}.tar.gz"
elif [ "$PROFILE_NAME" != "" ]; then
	# Get the profile configuration
	PROFILE_CONFIG=$(jq -r ".${PROFILE_NAME}" /backallup/profiles/allback2struct.json)

	if [ "$DOMAIN" != "" ]; then
		# Create the backup file
		if ! tar -czf "${BACKUP_DIR}/${PROFILE_NAME}_${DOMAIN}_${DATETIME}.tar.gz" "${PROFILE_CONFIG}"; then
			echo "Error: Failed to create backup file."
			exit 1
		fi

		# Output the backup file name to the terminal
		echo "Backup file created: ${BACKUP_DIR}/${PROFILE_NAME}_${DOMAIN}_${DATETIME}.tar.gz"
	elif [ "$CUSTOM_JSON_FILE" != "" ]; then
		# Get the custom JSON configuration
		CUSTOM_JSON_CONFIG=$(jq -r ".${CUSTOM_JSON_FILE}" /backallup/profiles/allback2struct.json)

		# Create the backup file
		if ! tar -czf "${BACKUP_DIR}/${PROFILE_NAME}_all_${DATETIME}.tar.gz" "${CUSTOM_JSON_CONFIG}"; then
			echo "Error: Failed to create backup file."
			exit 1
		fi

		# Output the backup file name to the terminal
		echo "Backup file created: ${BACKUP_DIR}/${PROFILE_NAME}_all_${DATETIME}.tar.gz"
	fi
fi
