#!/bin/bash

# Set the backup directory
BACKUP_DIR=/backallup/backups

# Check for dependencies
DEPENDENCIES=("tar" "jq" "ip" "hostname" "uname" "date")
for DEPENDENCY in "${DEPENDENCIES[@]}"; do
    if ! command -v "$DEPENDENCY" &>/dev/null; then
        echo "Error: $DEPENDENCY is not installed. Please install it and try again."
        exit 1
    fi
done

# Define the help message
HELP_MESSAGE="
Usage: backallup [options]

Options:
    -h, --help      Display this help message
    -p, --profile   Specify the profile name
    -d, --domain    Specify the domain name
    -j, --json      Specify the custom JSON file
    -r, --tar       Specify the custom TAR file
    -s, --server    Backup the entire server
    --skip-backups  Skip backing up the /backallup/backups folder

Examples:
    backallup -p myprofile -d mydomain
    backallup -p myprofile -j custom.json
    backallup -s
    backallup -s --skip-backups
    backallup myfile.txt
"

# Get the command line arguments
options=$(getopt -o hp:d:j:r:s --long help,profile:,domain:,json:,tar:,server,skipbks -- "$@")
eval set -- "$options"

while true; do
    case "$1" in
        -h|--help)
            echo "$HELP_MESSAGE"
            exit 0
            ;;
        -p|--profile)
            PROFILE_NAME="$2"
            shift 2
            ;;
        -d|--domain)
            DOMAIN="$2"
            shift 2
            ;;
        -j|--json)
            CUSTOM_JSON_FILE="$2"
            shift 2
            ;;
        -r|--tar)
            CUSTOM_TAR_GZ_FILE="$2"
            shift 2
            ;;
        -s|--server)
            SERVER_BACKUP="true"
            shift
            ;;
        --skipbks)
            SKIP_BACKUPS="true"
            shift
            ;;
        --)
            shift
            break
            ;;
    esac
done

# Set the hostname, IP address, OS name, and datetime
HOSTNAME=$(hostname)
IPADDRESS=$(dig +short $(hostname) | head -1)
OSNAME=$(lsb_release -ds | tr ' ' '_')
DATETIME=$(date +%d-%m-%Y_%H-%M-%S)
BACKUP_DIR="/backallup/backups"

# Implement the backallup commands
if [ "$SERVER_BACKUP" = "true" ]; then
  
    # Create the backup file
    FILENAME="${HOSTNAME}_${IPADDRESS}_${OSNAME}_${DATETIME}.tar.gz"
    BACKUP_PATH="${BACKUP_DIR}/${HOSTNAME}_${IPADDRESS}_${OSNAME}_${DATETIME}.tar.gz"

    # Create the backup
    if [ "$SKIP_BACKUPS" = "true" ]; then
        echo "Skipping ${BACKUP_DIR} from backup..."
        sudo tar -cvpzf ${BACKUP_PATH} --exclude=${BACKUP_DIR} --exclude=${BACKUP_PATH}} --one-file-system /
        echo "Full Backup, without ${BACKUP_DIR} created in: ${BACKUP_PATH}"
    else
        sudo tar -cvpzf ${BACKUP_DIR}/${FILENAME} --ignore-failed-read -C / --exclude=${BACKUP_DIR}/${FILENAME} --one-file-system /
        echo "Full Backup created in: ${BACKUP_PATH}"
    fi

    # Output the backup file name to the terminal
    echo "You will find it here ${BACKUP_DIR}/${HOSTNAME}_${IPADDRESS}_${OSNAME}_${DATETIME}.tar.gz"

elif [ "$1" != "" ]; then
    # Get the file or directory name
    FILE_OR_DIRECTORY=$1

    # Create the backup file
    if ! tar -cvpzf "${BACKUP_DIR}${FILE_OR_DIRECTORY}_${DATETIME}.tar.gz" "${FILE_OR_DIRECTORY}"; then echo "Error: Failed to create backup file."
        exit 1
    fi

    # Output the backup file name to the terminal
    echo "Backup file created: ${BACKUP_DIR}${FILE_OR_DIRECTORY}_${DATETIME}.tar.gz"
elif [ "$PROFILE_NAME" != "" ]; then
    # Get the profile configuration
    PROFILE_CONFIG=$(jq -r ".${PROFILE_NAME}" /backallup/profiles/allback2struct.json)

    if [ "$DOMAIN" != "" ]; then
        # Create the backup file
        if ! tar -czf "${BACKUP_DIR}/${PROFILE_NAME}_${DOMAIN}_${DATETIME}.tar.gz" "${PROFILE_CONFIG}"; then
            echo "Error: Failed to create backup file."
            exit 1
        fi

        # Output the backup file name to the terminal
        echo "Backup file created: ${BACKUP_DIR}/${PROFILE_NAME}_${DOMAIN}_${DATETIME}.tar.gz"
    elif [ "$CUSTOM_JSON_FILE" != "" ]; then
        # Get the custom JSON configuration
        CUSTOM_JSON_CONFIG=$(jq -r ".${CUSTOM_JSON_FILE}" /backallup/profiles/allback2struct.json)

        # Create the backup file
        if ! tar -czf "${BACKUP_DIR}/${PROFILE_NAME}_all_${DATETIME}.tar.gz" "${CUSTOM_JSON_CONFIG}"; then
            echo "Error: Failed to create backup file."
            exit 1
        fi

        # Output the backup file name to the terminal
        echo "Backup file created: ${BACKUP_DIR}/${PROFILE_NAME}_all_${DATETIME}.tar.gz"
    fi
fi
